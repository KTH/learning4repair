New approach:
- Consider the context around the line, since I would hypothesize that
tokens in the line have high local context, meaning that surrounding
lines would use similar tokens. Therefore helping us to determine
the location.

- Give keywords in Java more weight, e.g. if statement should be replaced
with other if statement. Does this mean stopwords matters?

- If a line is just an extension/reduction of another line, e.g
if(length == 0) -> if(length == 0 || list.isEmpty()). This should
be more similar

- Use ensemble methods.

Discussion will Martin:
- Hidden dataset, divide the current dataset into competition dataset
and hidden dataset or find a new one? Kaggle very interesting
- How to compare different algorithms? Since each algorithms can
output different numbers of prediction
- Any research on correlation between variable/method/names and
surrounding lines? That will help finding where to place it
- Use ensemble method for regression, right now just average
- Master' Thesis direction, relationship between replaced code line?
Can be used to help automated program repair (rank repair ingredient)
Can be used to search for similar code line (e.g. forgot exact code line)
Give more insight to hunk, function similarity?
- Our research is not about finding similar code lines, but relationship
between replace lines. Therefore ground truth is hard.
- My hypothesis was that replace code are close in string metric,
and indeed, using string metric gave 92-95% recall@5, which confirms
my hypothesis. But corner cases are more interesting!
- Analyzed negative result from tfidf_split, confirm that ensemble
and context will indeed help. But other corner cases are hard!
- Stopwords matters, structure matters.
